// Mocks generated by Mockito 5.4.4 from annotations
// in clean_architecture/test/features/number_trivia/presentation/bloc/number_trivia_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:clean_architecture/core/error/failures/failures.dart' as _i6;
import 'package:clean_architecture/core/use_cases/use_case.dart' as _i10;
import 'package:clean_architecture/core/utils/input_converter.dart' as _i11;
import 'package:clean_architecture/features/number_trivia/domain/entities/number_trivia.dart'
    as _i7;
import 'package:clean_architecture/features/number_trivia/domain/repositories/number_trivia_repository.dart'
    as _i2;
import 'package:clean_architecture/features/number_trivia/domain/use_cases/get_concrete_number_trivia.dart'
    as _i3;
import 'package:clean_architecture/features/number_trivia/domain/use_cases/get_random_number_trivia.dart'
    as _i9;
import 'package:fpdart/fpdart.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNumberTriviaRepository_0 extends _i1.SmartFake
    implements _i2.NumberTriviaRepository {
  _FakeNumberTriviaRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetConcreteNumberTriviaUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteNumberTriviaUseCase extends _i1.Mock
    implements _i3.GetConcreteNumberTriviaUseCase {
  MockGetConcreteNumberTriviaUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NumberTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNumberTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NumberTriviaRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.NumberTrivia>> call(
          _i3.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, _i7.NumberTrivia>>.value(
                _i8.dummyValue<_i5.Either<_i6.Failure, _i7.NumberTrivia>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.Failure, _i7.NumberTrivia>>);
}

/// A class which mocks [GetRandomNumberTriviaUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomNumberTriviaUseCase extends _i1.Mock
    implements _i9.GetRandomNumberTriviaUseCase {
  MockGetRandomNumberTriviaUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NumberTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNumberTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NumberTriviaRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.NumberTrivia>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, _i7.NumberTrivia>>.value(
                _i8.dummyValue<_i5.Either<_i6.Failure, _i7.NumberTrivia>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.Failure, _i7.NumberTrivia>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i11.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Either<_i6.Failure, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnsignedInteger,
          [str],
        ),
        returnValue: _i8.dummyValue<_i5.Either<_i6.Failure, int>>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
      ) as _i5.Either<_i6.Failure, int>);
}
